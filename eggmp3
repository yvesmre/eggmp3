#!/bin/bash
set -eo pipefail
trap handle-ctrl-c INT

handle-ctrl-c () {
    echo "Cancelling..."
    exit 1
}

init_vars () {
    USER=$(whoami)
    downloadDir="/mp3s/$USER"
}

downloadVid () {
    gum spin --spinner=points --title "Downloading \"$1\"" -- yt-dlp -x --audio-format mp3 --progress --no-warnings -q --paths "$downloadDir" "$2"
}

getDownloadDir () {
    echo "Navigate with arrow keys, press ENTER to select..."
    folder=$( cd /mp3s/ ; gum file --directory --file=false  )
    downloadDir="/mp3s/$folder"
}

configureSearch () {
    prompt="By default, we will pull up 5 search results. Getting more results will take considerably longer. Would you like to change the amount of results?"
    if gum confirm --default=no "$prompt"; then
        numResults=$(gum input --placeholder "Enter how many search results you'd like:")
    else
        numResults=5
    fi
}

getSearch () {
    query=$(gum input --placeholder "What would you like to search for?")
    results=$(gum spin --spinner=points --title "Searching for \"$query\"... (this may take a while)" --show-output -- python eggmp3.py "$query")
    echo $results
}

parseSearch () {
    ids=$(echo "$results" | sed -n 'n;p') # every even row
    titles=$(echo "$results" | sed -n 'p;n') # every odd row
    videos=$(paste <(echo "$titles") <(echo "$ids"))
    videos=${videos//\"/}
}

getChoice () {
    choice=$(gum table -f <(echo "$videos") -c "Title","id" -w 50,12 -s "	")
    chosenTitle=$(echo "$choice" | cut -f1)
    chosenID=$(echo "$choice" | cut -f2)
}

init_vars # Initialises user and downloadDir

gum style --border double "Welcome to eggmp3!"

configureSearch
getSearch # Gets search query from user and searches YouTube
parseSearch # parses search results
getChoice # Displays choices to user to pick from

# Offer to create a download directory if one doesnt exist at $downloadDir/$user
if [ ! -d "$downloadDir" ]
then
    prompt="{$downloadDir} doesn't exist! Create?"  
    if gum confirm --negative="No, download somewhere else" "$prompt"; then 
        mkdir "/mp3s/$USER"
    else
        getDownloadDir
    fi
fi

# Repeatedly offer to change seperate download dir until user confirms
until gum confirm --negative="No, download somewhere else" "Downloading to $downloadDir. Is this ok?"
do
    getDownloadDir
done

# Download the video
downloadVid "$chosenTitle" "$chosenID"

echo "All done! Successfully downloaded "$chosenTitle" to "$downloadDir""
